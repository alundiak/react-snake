{"version":3,"sources":["components/Point.tsx","components/Board.tsx","components/SnakeGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Point","gameTrigger","boardState","y","x","isSnake","snake","snakeBegin","restOfSnake","isHead","isTail","some","el","className","targetPoint","onClick","applyAxis","initialBoardState","boardSize","started","finished","conflict","Board","children","useReducer","boardReducer","dispatch","width","height","newDirection","console","log","type","dispatchMove","snakeHead","yDirection","xDirection","i","callback","setTimeout","snakeMove","newPoint","newPosition","boardCore","push","state","action","SnakeGame","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e5f55fd.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Point({ gameTrigger, boardState, y, x }: any) {\n\n\tconst isTarget = () => {\n\t\tif (y === boardState.targetPoint[0] && x === boardState.targetPoint[1]) {\n\t\t\treturn 'target';\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tconst isSnake = () => {\n\t\tconst [snakeBegin, ...restOfSnake] = boardState.snake;\n\n\t\tconst isHead = y === snakeBegin[0] && x === snakeBegin[1];\n\t\tconst isTail = restOfSnake.some((el: any) => {\n\t\t\treturn y === el[0] && x === el[1];\n\t\t});\n\n\t\tif (isHead) {\n\t\t\treturn 'snake head';\n\t\t} else if (isTail) {\n\t\t\treturn 'snake tail';\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tconst className = `${isTarget()} ${isSnake()}`;\n\n\tconst onPointClickHandler = (/* e: any */) => {\n\t\treturn !isSnake() ? gameTrigger([y, x]) : null;\n\t};\n\n\treturn <div className={`point ${className}`} onClick={onPointClickHandler}>{applyAxis(y, x)}</div>\n}\n\nfunction applyAxis(y: number, x: number) {\n\tlet index: any = 0;\n\tif (y === 0) {\n\t\tindex = 'x' + x;\n\t} else {\n\t\tif (x === 0) {\n\t\t\tindex = 'y' + y;\n\t\t} else {\n\t\t\tindex = '';\n\t\t}\n\t}\n\treturn index;\n}\n","import React, { useState, useReducer, PropsWithChildren } from 'react';\nimport { Point } from './Point';\nimport './board.css';\n\n// Array for axis used in format [y x] of two positive numbers:\n// y top-to-bottom and\n// x left-to-right\nconst initialBoardState = {\n    boardSize: [8, 8],\n    targetPoint: [2, 3],\n    snake: [[4, 5]],\n    // snake: [[4, 5], [4, 6], [5, 6], [6, 6]],\n    // snake: { // alternative\n    //     head: [],\n    //     tail: []\n    // },\n    started: false,\n    finished: false,\n    conflict: false, // target | itself | edge\n};\n\n// Approach using <div> and css-grid layout\nexport function Board({ children }: PropsWithChildren<any>) {\n    const [boardState, dispatch] = useReducer(\n        boardReducer,\n        initialBoardState\n    );\n\n    const width = boardState.boardSize[0];\n    const height = boardState.boardSize[1];\n    // const matrix = Array(width).fill(null).map(el => Array(height).fill(0));\n    // console.log(matrix);\n\n    const gameTrigger = (newDirection: number[/* y x */]) => {\n        console.log('gameTrigger');\n\n        if (!boardState.started) {\n            dispatch({\n                type: 'START'\n            });\n        }\n\n        // This must be created on demand, after click for every cell once. NOT MORE\n        const dispatchMove = (newPoint: number[]) =>\n            dispatch({\n                type: 'SNAKE_MOVE',\n                newPosition: newPoint\n            });\n\n        snakeMove(boardState, newDirection, dispatchMove);\n    };\n\n    const boardCore = [];\n    for (let y = 0; y < width; y++) {\n        for (let x = 0; x < height; x++) {\n            boardCore.push(<Point gameTrigger={gameTrigger} boardState={boardState} y={y} x={x} key={`cell-x[${x}]-y[${y}]`} />);\n        }\n    }\n\n    return (\n        <>\n            <div className=\"wrapper\">\n                {boardCore}\n            </div>\n            {children}\n        </>\n    );\n}\n\nfunction boardReducer(state: any, action: any) {\n    switch (action.type) {\n        case 'START':\n            console.log('Game STARTED');\n            return {\n                ...state,\n                started: true // and start while(1) loop OR setInterval()\n            }\n\n        case 'FINISH':\n            console.log('Game FINISHED');\n            return {\n                ...state,\n                started: false // and stop while(1) loop OR setInterval()\n            }\n\n        case 'SNAKE_MOVE':\n            console.log('Snake is MOVING');\n            // Expected:\n            //  top: x = const, y--\n            //  bottom: x = const, y++\n            //  left: x--, y = const\n            //  right: x++, y = const\n\n            // state.snake.unshift(action.newDirection);\n            // state.snake.pop(); // add a keyframe animation for slow fade out of last point on tail\n\n            state.snake[0] = action.newPosition;\n\n            // TODO\n            // const [snakeHead, ...snakeTail] = state.snake; // snakeTail can be undefined or many arrays [].length == 2\n            // TODO\n\n            return {\n                ...state,\n            }\n\n        case 'CONFLICT_WITH_TARGET':\n            // TODO\n            // when snake eats target [yT, xT], size should be increased - new sub-array will be pushed to boardState.snake\n            break;\n\n        case 'CONFLICT_WITH_ITSELF':\n            // TODO\n            break;\n\n        case 'CONFLICT_WITH_EDGES':\n            // TODO\n            // [0 > x > width] or\n            // [0 > y > height]\n            break;\n\n        default:\n            return state;\n    }\n}\n\nfunction snakeMove(boardState: any, newDirection: any, dispatchMove: any) {\n    const snakeHead = boardState.snake[0];\n    console.log(snakeHead, newDirection);\n\n    const [yDirection, xDirection] = newDirection;\n\n    if (yDirection === snakeHead[0]) {\n        // it is LEFT or RIGHT move of snake head\n        if (xDirection < snakeHead[1]) {\n            // let interval1: any;\n            // -- for loop = LEFT MOVE\n            let i = snakeHead[1] - 1; /* next point */;\n            const callback = () => {\n                console.log('callback');\n                dispatchMove([yDirection, i]);\n                i--;\n            };\n\n            console.log(i);\n            setTimeout(callback, 500);\n            // if i < 0 => -1 and less => dispatch(CONFLICT_EDGE)\n\n            // clearInterval(interval1);\n        } else {\n            // ++ for loop = RIGHT MOVE\n            // for (let i = snakeHead[1]; i <= boardState.boardSize[1] - 1; i--) {\n\n            // }\n        }\n    } else {\n        // use case when clicked point NOT on the same Y axis\n    }\n\n    if (xDirection === snakeHead[1]) {\n        // it is TOP or BOTTOM move\n        if (yDirection < snakeHead[0]) {\n            // -- for loop = TOP MOVE\n        } else {\n            // ++ for loop = BOTTOM MOVE\n        }\n    } else {\n        // use case when clicked point NOT on the same X axis\n    }\n\n}","import React from 'react';\nimport { Board } from './Board';\n// import { Point } from './Point';\n// import { Snake } from './Snake';\n\n// import './snake-game.css';\n\n// OR random   Math.random(10, 0);\nexport function SnakeGame() {\n  // dynamics, re-renders, etc\n\n  return (\n    <Board>\n    </Board>\n  );\n}\n","import React from 'react';\nimport { SnakeGame } from './components/SnakeGame';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"\">\n      </header>\n      <main>\n        <SnakeGame />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}